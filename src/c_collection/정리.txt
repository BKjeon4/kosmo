[ 9월 26일 월요일 ]

​

변수 : 값 저장

- 자료형 

    기본형 : boolean / char / int(long) / double

    참조형 : 배열/클래스 ( new 이용 )

​

배열 : 동일한자료형

클래스 : 다른자료형 + 메소드

` 생성자 : 클래스명과 동일 / 리턴형X

` 공유 : static

- 클래스명 접근 (객체생성X)

` overloading : 메소드명 동일 / 인자가 다른 함수들

상속

[ 설계시 ]

` 부모클래스 : 공통기능

` 자식클래스 : 고유기능

​

[ 사용시 ]

` 부모가 가진 멤버 그냥 사용가능

` 부모에게 없는 멤버는 그냥 추가해서 사용

` 부모한테 있지만 변경(재정의) - overriding

: 메소드명, 인자, 리턴형 동일

​

부모변수에 자식객체 생성 가능 -> 다형성

​

abstract : 미완성

- 메소드 : overriding 강제성

- 클래스 : 객체생성 X, 부모클래스만 됨

​

final : 변경불가

- 필드 : 값 변경 안됨

- 메소드 : overriding X

- 클래스  : 부모클래스가 될 수 없음

​

----------------------------------------

# modifier

​

 [1]  class A {

      [2]  int A;

      [3]  A() { }

      [4]  void A() {}

   }

​

  [1] public / protected / abstract / final

  [2] public / protected / private / static / final 

  [3] public / protected / private

  [4] public / protected / private / static / abstract / final 


===================================================

class A {
      int A;
      A() { }
      void A() {}
}

inerface B {
     [1] int B;
     [2] void B();
}


	'생성자 x'
	' 메소드 {} '




클래스에서는 메소드에 abstract 가 붙어도 100가지의 메소드 중 1개의 메소드만 가질 수 있기 때문에 100% 완전하다고 할 순 없다. 하지만 interface 는 완벽한 추상적인 의미를 가진다.

각 각 의 다른 객체를 표준화 할 때
​

​
----------------------------------------------------------------------------
*콜렉션
	: 자료구조 관련 클래스의 모임
1. List
	- 인덱스 사용 가능 (순서를 저장)

2. Set
	- 순서를 저장하지 않음
	- 데이터 중복 x

3. Map
	- 키와 값 저장
	- 키 중복되면 안됨
	- 키로 값을 찾는 구조

​[참고] 스택(LIFO) 과 큐 (FIFO)

​

​